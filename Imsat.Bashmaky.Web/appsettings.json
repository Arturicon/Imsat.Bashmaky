{
  "Logging": {
    "LogLevel": {
      "Default": "Warning",
      "Microsoft.AspNetCore": "Critical"
    }
  },
  "ConnectionStrings": {
    "PostgresConnection": "Server=localhost;Port=5432;Database=bashmaky;User ID=test;Password=test;"
  },
  "AllowedHosts": "*",
  "AppConfig": {
    "shortSignalListCount": "6", //кол-во строк в сокращенном списке сигналов
    "pageUpdateTimeSec": "300", //время автоматического обновление веб страницы. сек
    "checkConnectionTimeMin": "15", //интервал проверки последнего сигнала от устройств. минуты
    "maxConnectionDelayTimeMin": "30" //максимальное время без сигналов, после которого устройство считается потерявшим связь. минуты
  },
  "MqttConfig": {
    "hostsMap": [
      //{
      //  "address": "telmira.com",
      //  "port": "1883",
      //  "user": "user1",
      //  "password": "pvG4MAnySzRlpYtT",
      //  "mappers": [ "imei_st_template", "mac_st_template" ]
      //},
      {
        "address": "localhost",
        //"address": "test.mosquitto.org",
        "port": "1883",
        "mappers": [ "imei_st_template", "mac_st_template" ]
      }
    ],
    "mqttMappers": [
      {
        "name": "imei_st_template",
        "mqqtTopicQuery": "+/ST",
        "mqqtTopicPattern": "^[0-9]{15}/ST$",
        "services": [
          {
            "type": "logTerminal",
            "maperScheme": "default_scheme_imei",
            "properties": [
              {
                "property": "TS",
                "inFunc": "let date = JSON.parse(arg1).TS; return new Date(Number('20'+date[0]+date[1]), Number(date[2]+date[3])-1, Number(date[4]+date[5]), Number(date[6]+date[7]), Number(date[8]+date[9]), Number(date[10]+date[11]));"
              }
            ]
          }
        ]
      },
      {
        "name": "mac_st_template",
        "mqqtTopicQuery": "+/ST",
        //"mqqtTopicPattern": "^[a-fA-F0-9]{12}/ST$",
        "mqqtTopicPattern": "^(?:[0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}|(?:[0-9a-fA-F]{2}-){5}[0-9a-fA-F]{2}|(?:[0-9a-fA-F]{2}){5}[0-9a-fA-F]{2}/ST$",
        "services": [
          {
            "type": "logBox",
            "maperScheme": "default_scheme_mac",
            "properties": [
              {
                "property": "ST",
                "inFunc": "return Number(JSON.parse(arg1).ST)",
                "validateFunc": "value <= 2"
              }
            ]
          },
          {
            "type": "logBashmak",
            "maperScheme": "default_scheme_mac",
            "properties": [
              {
                "property": "ST",
                "inFunc": "return Number(JSON.parse(arg1).ST)",
                "validateFunc": "value >= 10"
              }
            ]
          }
        ]
      }
    ],
    "mqttSchemes": [
      {
        "id": "default_scheme_imei",
        "properties": [
          {
            "property": "Imei",
            "inFunc": "return JSON.parse(arg1).ID"
          },
          {
            "property": "NET",
            "inFunc": "return JSON.parse(arg1).NET"
          },
          {
            "property": "RSSI",
            "inFunc": "return Number(JSON.parse(arg1).RSSI)"
          },
          {
            "property": "VDD",
            "inFunc": "return Number(JSON.parse(arg1).VDD)"
          },
          {
            "property": "LAT",
            "inFunc": "return parseFloat(JSON.parse(arg1).LAT.replace(',','.'))"
          },
          {
            "property": "LON",
            "inFunc": "return parseFloat(JSON.parse(arg1).LON.replace(',','.'))"
          }
          ,
          {
            "property": "StationId",
            "inFunc": "return 1"
          },
          {
            "property": "Source",
            "inFunc": "return JSON.parse(arg1).Source"
          }
        ]
      },
      {
        "id": "default_scheme_mac",
        "properties": [
          {
            "property": "Mac",
            "inFunc": "return JSON.parse(arg1).ID"
          },
          {
            "property": "TS",
            "inFunc": "let date = JSON.parse(arg1).TS; return new Date(Number('20'+date[0]+date[1]), Number(date[2]+date[3])-1, Number(date[4]+date[5]), Number(date[6]+date[7]), Number(date[8]+date[9]), Number(date[10]+date[11]));"
          },
          {
            "property": "VDD",
            "inFunc": "return Number(JSON.parse(arg1).VDD)"
          },
          {
            "property": "ST",
            "inFunc": "return Number(JSON.parse(arg1).ST)"
          },
          {
            "property": "IMEI",
            "inFunc": "return Number(JSON.parse(arg1).IMEI)"
          },
          {
            "property": "LAT",
            "inFunc": "return parseFloat(JSON.parse(arg1).LAT.replace(',','.'))"
          },
          {
            "property": "LON",
            "inFunc": "return parseFloat(JSON.parse(arg1).LON.replace(',','.'))"
          },
          {
            "property": "StationId",
            "inFunc": "return 1"
          },
          {
            "property": "Source",
            "inFunc": "return JSON.parse(arg1).Source"
          }
        ]
      }
    ]
  }
}
